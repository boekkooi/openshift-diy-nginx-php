#!/bin/bash

function check_libtool() {
    local libtool_bin=${ROOT_DIR}/libs/bin/libtool
    if [[ ! -e  ${libtool_bin} ]]; then
        echo "Libtool not installed."
        install_libtool
    else
        local libtool_version=`${libtool_bin} --version | head -n 1 | grep -oh '[0-9.]*$' | tr -d '\n'`

        if [[ ${LIBTOOL_VERSION} != ${libtool_version} ]]; then
            echo "Libtool old, version: ${libtool_version}."
            install_libtool
        else
            echo "Libtool up to date, version: ${libtool_version}."
        fi
    fi
}

function install_libtool() {
    local pkg=libtool-${LIBTOOL_VERSION}.tar.gz
    local ts=`date +%s`

    mkdir -p ${BUILD_DIR}
    pushd ${BUILD_DIR}

    # Get archive
    download_and_unpack ${pkg} http://gnu.xl-mirror.nl/libtool/${pkg}
    pushd libtool-${LIBTOOL_VERSION}

    echo "Configuring Libtool."
    mkdir -p ${ROOT_DIR}/libs/lib64/
    ./configure --prefix=${ROOT_DIR}/libs/ --libdir=${ROOT_DIR}/libs/lib64
    echo "Compiling Libtool."
    make install

    popd
    popd
    rm -rf ${BUILD_DIR}
}

function install_libmcrypt() {
    local pkg=libmcrypt-${LIBMCRYPT_VERSION}.tar.gz
    local ts=`date +%s`

    mkdir -p ${BUILD_DIR}
    pushd ${BUILD_DIR}

    # Get archive
    download_and_unpack ${pkg} "http://sourceforge.net/projects/mcrypt/files/Libmcrypt/${LIBMCRYPT_VERSION}/${pkg}/download?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fmcrypt%2F&ts=${ts}&use_mirror=freefr"
    pushd libmcrypt-${LIBMCRYPT_VERSION}

    echo "Configuring LibMCrypt."
    mkdir -p ${ROOT_DIR}/libs/lib64/
    ./configure \
        --disable-posix-threads \
        --enable-dynamic-loading \
		--disable-shared \
		--with-included-algos=cbc,cfb,ctr,ecb,ncfb,nofb,ofb,stream,cast-128,gost,rijndael-128,twofish,arcfour,cast-256,loki97,rijndael-192,saferplus,wake,blowfish-compat,des,rijndael-256,serpent,xtea,blowfish,enigma,rc2,tripledes \
        --prefix=${ROOT_DIR}/libs/ \
        --libdir=${ROOT_DIR}/libs/lib64/
    echo "Compiling LibMCrypt."
    make install

    popd
    popd
    rm -rf ${BUILD_DIR}
}

function check_libmcrypt() {
    check_libtool

    local mcrypt_bin=${ROOT_DIR}/libs/bin/libmcrypt-config
    if [[ ! -e  ${mcrypt_bin} ]]; then
        echo "LibMCrypt not installed."
        install_libmcrypt
    else
        local mcrypt_version=`${mcrypt_bin} --version | tr -d '\n'`

        if [[ ${LIBMCRYPT_VERSION} != ${mcrypt_version} ]]; then
            echo "LibMCrypt old, version: ${mcrypt_version}."
            install_libmcrypt
        else
            echo "LibMCrypt up to date, version: ${mcrypt_version}."
        fi
    fi
}

function install_icu() {
    local pkg=icu4c-${ICU_VERSION//./_}-src.tgz

    mkdir -p ${BUILD_DIR}
    pushd ${BUILD_DIR}

    # Get archive
    download_and_unpack ${pkg} http://download.icu-project.org/files/icu4c/${ICU_VERSION}/${pkg} icu
    pushd icu/source/

    echo "Configuring ICU."
    chmod +x runConfigureICU configure install-sh
    ./configure \
        --prefix=${ROOT_DIR}/libs/

    echo "Compiling ICU."
    make install

    echo "Cleaning build directory."
    popd
    popd
    rm -rf ${BUILD_DIR}
}

function check_icu() {
    local icu_bin=${ROOT_DIR}/libs/bin/icu-config
    if [[ ! -e  ${icu_bin} ]]; then
        echo "ICU not installed."
        install_icu
    else
        local icu_version=`${icu_bin} --version | tr -d '\n'`

        if [[ ${ICU_VERSION} != ${icu_version} ]]; then
            echo "ICU old, version: ${icu_version}."
            install_icu
        else
            echo "ICU up to date, version: ${icu_version}."
        fi
    fi
}

function install_bison() {
    local pkg=bison-${BISON_VERSION}.tar.gz

    mkdir -p ${BUILD_DIR}
    pushd ${BUILD_DIR}

    # Get archive
    download_and_unpack ${pkg} http://ftp.gnu.org/gnu/bison/${pkg}
    pushd bison-${BISON_VERSION}

    echo "Configuring Bison."
    ./configure --prefix=${ROOT_DIR}/libs/ --libdir=${ROOT_DIR}/libs/lib64

    echo "Compiling Bison."
    make install

    popd
    popd
    rm -rf ${BUILD_DIR}
}

function check_bison() {
    local bin=${ROOT_DIR}/libs/bin/bison
    if [[ ! -e  ${bin} ]]; then
        echo "Bison not installed."
        install_bison
    else
        local version=`${bin} --version | head -n 1 | grep -oh '[0-9.]*' | head -n 1 | tr -d '\n'`

        if [[ ${version} != "${BISON_VERSION}"* ]]; then
            echo "Bison old, version: ${version}."
            install_bison
        else
            echo "Bison up to date, version: ${version}."
        fi
    fi
}

function install_re2c() {
    # Remark if not in PATH add RE2C=${ROOT_DIR}/libs/bin/re2c to php ./configure
    local pkg=re2c-${RE2C_VERSION}.tar.gz
    local ts=`date +%s`

    mkdir -p ${BUILD_DIR}
    pushd ${BUILD_DIR}

    # Get archive
    download_and_unpack ${pkg} "http://sourceforge.net/projects/re2c/files/${RE2C_VERSION}/${pkg}/download?use_mirror=nchc&r=&use_mirror=ncu"
    pushd re2c-${RE2C_VERSION}

    echo "Configuring Re2c."
    mkdir -p ${ROOT_DIR}/libs/lib64/
    ./configure --prefix=${ROOT_DIR}/libs/ --libdir=${ROOT_DIR}/libs/lib64

    echo "Compiling Re2c."
    make install

    popd
    popd
    rm -rf ${BUILD_DIR}
}

function check_re2c() {
    local re2c_bin=${ROOT_DIR}/libs/bin/re2c
    if [[ ! -e  ${re2c_bin} ]]; then
        echo "Re2c not installed."
        install_re2c
    else
        local version=`${re2c_bin} --version | head -n 1 | grep -oh '[0-9.]*$' | tr -d '\n'`

        if [[ ${RE2C_VERSION} != ${version} ]]; then
            echo "Re2c old, version: ${version}."
            install_re2c
        else
            echo "Re2c up to date, version: ${version}."
        fi
    fi
}
